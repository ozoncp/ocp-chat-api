// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chat_api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatApiClient is the client API for ChatApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatApiClient interface {
	CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*CreateChatResponse, error)
	DescribeChat(ctx context.Context, in *DescribeChatRequest, opts ...grpc.CallOption) (*DescribeChatResponse, error)
	ListChats(ctx context.Context, in *ListChatsRequest, opts ...grpc.CallOption) (*ListChatsResponse, error)
	RemoveChat(ctx context.Context, in *RemoveChatRequest, opts ...grpc.CallOption) (*RemoveChatResponse, error)
}

type chatApiClient struct {
	cc grpc.ClientConnInterface
}

func NewChatApiClient(cc grpc.ClientConnInterface) ChatApiClient {
	return &chatApiClient{cc}
}

func (c *chatApiClient) CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*CreateChatResponse, error) {
	out := new(CreateChatResponse)
	err := c.cc.Invoke(ctx, "/chat_api.ChatApi/CreateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatApiClient) DescribeChat(ctx context.Context, in *DescribeChatRequest, opts ...grpc.CallOption) (*DescribeChatResponse, error) {
	out := new(DescribeChatResponse)
	err := c.cc.Invoke(ctx, "/chat_api.ChatApi/DescribeChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatApiClient) ListChats(ctx context.Context, in *ListChatsRequest, opts ...grpc.CallOption) (*ListChatsResponse, error) {
	out := new(ListChatsResponse)
	err := c.cc.Invoke(ctx, "/chat_api.ChatApi/ListChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatApiClient) RemoveChat(ctx context.Context, in *RemoveChatRequest, opts ...grpc.CallOption) (*RemoveChatResponse, error) {
	out := new(RemoveChatResponse)
	err := c.cc.Invoke(ctx, "/chat_api.ChatApi/RemoveChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatApiServer is the server API for ChatApi service.
// All implementations must embed UnimplementedChatApiServer
// for forward compatibility
type ChatApiServer interface {
	CreateChat(context.Context, *CreateChatRequest) (*CreateChatResponse, error)
	DescribeChat(context.Context, *DescribeChatRequest) (*DescribeChatResponse, error)
	ListChats(context.Context, *ListChatsRequest) (*ListChatsResponse, error)
	RemoveChat(context.Context, *RemoveChatRequest) (*RemoveChatResponse, error)
	mustEmbedUnimplementedChatApiServer()
}

// UnimplementedChatApiServer must be embedded to have forward compatible implementations.
type UnimplementedChatApiServer struct{}

func (UnimplementedChatApiServer) CreateChat(context.Context, *CreateChatRequest) (*CreateChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}

func (UnimplementedChatApiServer) DescribeChat(context.Context, *DescribeChatRequest) (*DescribeChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeChat not implemented")
}

func (UnimplementedChatApiServer) ListChats(context.Context, *ListChatsRequest) (*ListChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChats not implemented")
}

func (UnimplementedChatApiServer) RemoveChat(context.Context, *RemoveChatRequest) (*RemoveChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveChat not implemented")
}
func (UnimplementedChatApiServer) mustEmbedUnimplementedChatApiServer() {}

// UnsafeChatApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatApiServer will
// result in compilation errors.
type UnsafeChatApiServer interface {
	mustEmbedUnimplementedChatApiServer()
}

func RegisterChatApiServer(s grpc.ServiceRegistrar, srv ChatApiServer) {
	s.RegisterService(&ChatApi_ServiceDesc, srv)
}

func _ChatApi_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatApiServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_api.ChatApi/CreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatApiServer).CreateChat(ctx, req.(*CreateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatApi_DescribeChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatApiServer).DescribeChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_api.ChatApi/DescribeChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatApiServer).DescribeChat(ctx, req.(*DescribeChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatApi_ListChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatApiServer).ListChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_api.ChatApi/ListChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatApiServer).ListChats(ctx, req.(*ListChatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatApi_RemoveChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatApiServer).RemoveChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_api.ChatApi/RemoveChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatApiServer).RemoveChat(ctx, req.(*RemoveChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatApi_ServiceDesc is the grpc.ServiceDesc for ChatApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat_api.ChatApi",
	HandlerType: (*ChatApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChat",
			Handler:    _ChatApi_CreateChat_Handler,
		},
		{
			MethodName: "DescribeChat",
			Handler:    _ChatApi_DescribeChat_Handler,
		},
		{
			MethodName: "ListChats",
			Handler:    _ChatApi_ListChats_Handler,
		},
		{
			MethodName: "RemoveChat",
			Handler:    _ChatApi_RemoveChat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ocp-chat-api.proto",
}
