// Code generated by MockGen. DO NOT EDIT.
// Source: ./chat.go

// Package message_repo is a generated GoMock package.
package message_repo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	message "github.com/ozoncp/ocp-chat-api/internal/message"
)

// MockMessageRepo is a mock of MessageRepo interface.
type MockMessageRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepoMockRecorder
}

// MockMessageRepoMockRecorder is the mock recorder for MockMessageRepo.
type MockMessageRepoMockRecorder struct {
	mock *MockMessageRepo
}

// NewMockMessageRepo creates a new mock instance.
func NewMockMessageRepo(ctrl *gomock.Controller) *MockMessageRepo {
	mock := &MockMessageRepo{ctrl: ctrl}
	mock.recorder = &MockMessageRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepo) EXPECT() *MockMessageRepoMockRecorder {
	return m.recorder
}

// AddMessage mocks base method.
func (m *MockMessageRepo) AddMessage(mess *message.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddMessage", mess)
}

// AddMessage indicates an expected call of AddMessage.
func (mr *MockMessageRepoMockRecorder) AddMessage(mess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessage", reflect.TypeOf((*MockMessageRepo)(nil).AddMessage), mess)
}

// AddMessagesBatch mocks base method.
func (m *MockMessageRepo) AddMessagesBatch(mess []*message.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddMessagesBatch", mess)
}

// AddMessagesBatch indicates an expected call of AddMessagesBatch.
func (mr *MockMessageRepoMockRecorder) AddMessagesBatch(mess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessagesBatch", reflect.TypeOf((*MockMessageRepo)(nil).AddMessagesBatch), mess)
}

// DescribeMessageById mocks base method.
func (m *MockMessageRepo) DescribeMessageById(messageID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMessageById", messageID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMessageById indicates an expected call of DescribeMessageById.
func (mr *MockMessageRepoMockRecorder) DescribeMessageById(messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMessageById", reflect.TypeOf((*MockMessageRepo)(nil).DescribeMessageById), messageID)
}

// GetMessages mocks base method.
func (m *MockMessageRepo) GetMessages() []*message.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages")
	ret0, _ := ret[0].([]*message.Message)
	return ret0
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockMessageRepoMockRecorder) GetMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockMessageRepo)(nil).GetMessages))
}

// ListMessages mocks base method.
func (m *MockMessageRepo) ListMessages() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessages")
	ret0, _ := ret[0].(string)
	return ret0
}

// ListMessages indicates an expected call of ListMessages.
func (mr *MockMessageRepoMockRecorder) ListMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessages", reflect.TypeOf((*MockMessageRepo)(nil).ListMessages))
}

// RemoveMessageById mocks base method.
func (m *MockMessageRepo) RemoveMessageById(messageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMessageById", messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMessageById indicates an expected call of RemoveMessageById.
func (mr *MockMessageRepoMockRecorder) RemoveMessageById(messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMessageById", reflect.TypeOf((*MockMessageRepo)(nil).RemoveMessageById), messageID)
}
