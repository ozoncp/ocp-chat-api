// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package chat_saver is a generated GoMock package.
package chat_saver

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	chat "github.com/ozoncp/ocp-chat-api/internal/chat"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// Describe mocks base method.
func (m *MockRepo) Describe(ctx context.Context, chatID uint64) (*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Describe", ctx, chatID)
	ret0, _ := ret[0].(*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Describe indicates an expected call of Describe.
func (mr *MockRepoMockRecorder) Describe(ctx, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*MockRepo)(nil).Describe), ctx, chatID)
}

// GetAll mocks base method.
func (m *MockRepo) GetAll(ctx context.Context) ([]*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepoMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepo)(nil).GetAll), ctx)
}

// Insert mocks base method.
func (m *MockRepo) Insert(ctx context.Context, classroomID uint64, link string) (*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, classroomID, link)
	ret0, _ := ret[0].(*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockRepoMockRecorder) Insert(ctx, classroomID, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRepo)(nil).Insert), ctx, classroomID, link)
}

// Remove mocks base method.
func (m *MockRepo) Remove(ctx context.Context, chatID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockRepoMockRecorder) Remove(ctx, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockRepo)(nil).Remove), ctx, chatID)
}

// MockSaver is a mock of Saver interface.
type MockSaver struct {
	ctrl     *gomock.Controller
	recorder *MockSaverMockRecorder
}

// MockSaverMockRecorder is the mock recorder for MockSaver.
type MockSaverMockRecorder struct {
	mock *MockSaver
}

// NewMockSaver creates a new mock instance.
func NewMockSaver(ctrl *gomock.Controller) *MockSaver {
	mock := &MockSaver{ctrl: ctrl}
	mock.recorder = &MockSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaver) EXPECT() *MockSaverMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockSaver) Save(ctx context.Context, ch ...*chat.Chat) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range ch {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSaverMockRecorder) Save(ctx interface{}, ch ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, ch...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSaver)(nil).Save), varargs...)
}

// MockMessageQueueConsumer is a mock of MessageQueueConsumer interface.
type MockMessageQueueConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockMessageQueueConsumerMockRecorder
}

// MockMessageQueueConsumerMockRecorder is the mock recorder for MockMessageQueueConsumer.
type MockMessageQueueConsumerMockRecorder struct {
	mock *MockMessageQueueConsumer
}

// NewMockMessageQueueConsumer creates a new mock instance.
func NewMockMessageQueueConsumer(ctrl *gomock.Controller) *MockMessageQueueConsumer {
	mock := &MockMessageQueueConsumer{ctrl: ctrl}
	mock.recorder = &MockMessageQueueConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageQueueConsumer) EXPECT() *MockMessageQueueConsumerMockRecorder {
	return m.recorder
}

// ReadChatsBatch mocks base method.
func (m *MockMessageQueueConsumer) ReadChatsBatch(ctx context.Context, batchSize int) ([]*chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadChatsBatch", ctx, batchSize)
	ret0, _ := ret[0].([]*chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadChatsBatch indicates an expected call of ReadChatsBatch.
func (mr *MockMessageQueueConsumerMockRecorder) ReadChatsBatch(ctx, batchSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadChatsBatch", reflect.TypeOf((*MockMessageQueueConsumer)(nil).ReadChatsBatch), ctx, batchSize)
}
